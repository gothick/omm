# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    gpx_directory: '%kernel.project_dir%/public/uploads/gpx'
    images_directory: '%kernel.project_dir%/public/uploads/images'
    env(EXIFTOOL_PATH): ~
    exiftool_path: '%env(EXIFTOOL_PATH)%'
    app.homebase_coords: [ '%env(float:HOME_BASE_LAT)%', '%env(float:HOME_BASE_LNG)%' ]
    # For command-line stuff that doesn't have a Request: https://symfony.com/doc/4.1/console/request_context.html
    router.request_context.host: 'omm.gothick.org.uk'
    router.request_context.scheme: 'https'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # Bindings for helpful parameters
        bind:
            $gpxDirectory: '%gpx_directory%'
            $imagesDirectory: '%images_directory%'
            $exiftoolPath: '%exiftool_path%'
            $homebaseCoords: '%app.homebase_coords%'
            $sectorImgUrl: '/images/sectors/'
            $sectorImgUrlFileType: 'png'
            $wanderFinder: '@fos_elastica.finder.wander'
            $imaggaClient: '@csa_guzzle.client.imagga'
            $imaggaApiKey: '%env(IMAGGA_API_KEY)%'
            $imaggaApiSecret: '%env(IMAGGA_API_SECRET)%'

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'
            - '../src/Tests/'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller/'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones
    App\Service\SettingsService:
        # Mild bodge. The settings service constructor reads from the database, but
        # on deployment the cache:clear (which loads services, apparently) crashes
        # if that happens before the migration to add the database table. Making
        # this service lazy is a cheap workaround.
        lazy: true

    # Moved to a global binding, above.
    #App\Service\GpxService:
    #    arguments:
    #       $gpxDirectory: '%gpx_directory%'

    # Event listeners
    App\EventListener\ImageUploadListener:
        tags:
            - { name: kernel.event_listener, event: vich_uploader.post_upload }

    # Doctrine event listeners
    App\EventListener\WanderUploadListener:
        tags:
            - { name: 'doctrine.orm.entity_listener' }

    App\EventListener\WanderDeleteListener:
        tags:
            - { name: 'doctrine.orm.entity_listener' }

    App\EventListener\ImageCalculatedFieldSetterListener:
        tags:
            - { name: 'doctrine.orm.entity_listener' }

    # Listens for events that might affect our stats cache on multiple
    # entity types
    App\EventListener\StatsCacheClearer:
        tags:
            -
                name: 'doctrine.event_subscriber'

    # Store session in database https://symfony.com/doc/current/session/database.html
    Symfony\Component\HttpFoundation\Session\Storage\Handler\PdoSessionHandler:
            arguments:
                - '%env(DATABASE_URL)%'

