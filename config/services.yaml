# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

imports:
    - { resource: imagga_service.yaml }

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    gpx_directory: '%kernel.project_dir%/public/uploads/gpx'
    images_directory: '%kernel.project_dir%/public/uploads/images'
    env(EXIFTOOL_PATH): ~
    exiftool_path: '%env(EXIFTOOL_PATH)%'
    app.homebase_coords: [ '%env(float:HOME_BASE_LAT)%', '%env(float:HOME_BASE_LNG)%' ]
    # For command-line stuff that doesn't have a Request: https://symfony.com/doc/4.1/console/request_context.html
    env(HOST_FOR_COMMANDS): 'omm.gothick.org.uk'
    router.request_context.host: '%env(HOST_FOR_COMMANDS)%'
    router.request_context.scheme: 'https'
    # Unused at the moment, but might be handy later.
    google.api_key: '%env(GOOGLE_API_KEY)%'
    google.project_id: '%env(GOOGLE_PROJECT_ID)%'
    google.service_account_file: '%kernel.project_dir%/%env(GOOGLE_SERVICE_ACCOUNT_FILE)%'
    env(WANDER_SIMPLIFIER_EPSILON_METRES): '3' # Number of metres resolution to use for Ramer Douglas Peuker polyline simplification for geoJSON wander output
    env(WANDER_GEOJSON_OUTPUT_PRECISION): '7' # Number of decimal places to output geoJSON latitude and longitude
    wander.simplifier_epsilon_metres: '%env(int:WANDER_SIMPLIFIER_EPSILON_METRES)%'
    wander.geojson_output_precision: '%env(int:WANDER_GEOJSON_OUTPUT_PRECISION)%'

    amazon.s3.key: '%env(resolve:AMAZON_S3_KEY)%'
    amazon.s3.secret: '%env(resolve:AMAZON_S3_SECRET)%'
    amazon.s3.bucket: '%env(resolve:AMAZON_S3_BUCKET)%'
    amazon.s3.region: '%env(resolve:AMAZON_S3_REGION)%'
    amazon.s3.version: '%env(resolve:AMAZON_S3_VERSION)%'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # Bindings for helpful parameters
        bind:
            $gpxDirectory: '%gpx_directory%'
            $imagesDirectory: '%images_directory%'
            $exiftoolPath: '%exiftool_path%'
            $homebaseCoords: '%app.homebase_coords%'
            $sectorImgUrl: '/images/sectors/'
            $sectorImgUrlFileType: 'png'
            $wanderFinder: '@fos_elastica.finder.wander'
            $wanderPersister: '@fos_elastica.object_persister.wander'
            $imaggaApiKey: '%env(IMAGGA_API_KEY)%'
            $imaggaApiSecret: '%env(IMAGGA_API_SECRET)%'
            $wanderSimplifierEpsilonMetres: '%wander.simplifier_epsilon_metres%'
            $wanderGeoJsonOutputPrecision: '%wander.geojson_output_precision%'
            $kernelEnvironment: '%kernel.environment%'

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'
            - '../src/Tests/'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller/'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones
    App\Service\SettingsService:
        # Mild bodge. The settings service constructor reads from the database, but
        # on deployment the cache:clear (which loads services, apparently) crashes
        # if that happens before the migration to add the database table. Making
        # this service lazy is a cheap workaround.
        lazy: true

    App\Service\ImageService:
        lazy: true # It's expensive.

    App\Service\ImaggaService:
        lazy: true
        arguments:
            $baseUri: '%imagga.base_uri%'

    App\Service\LocationService:
        lazy: true

    App\Service\ImageTaggingServiceInterface: '@App\Service\GoogleImageTaggingService'

    App\Service\GoogleImageTaggingService:
        lazy: true
        arguments:
            $projectId: '%google.project_id%'
            $serviceAccountFile: '%google.service_account_file%'

    Liip\ImagineBundle\Service\FilterService:
        alias: 'liip_imagine.service.filter'

    App\Service\GpxService:
        public: true

    # Event listeners
    App\EventListener\ImageUploadListener:
        tags:
            - { name: kernel.event_listener, event: vich_uploader.post_upload }

    # Doctrine event listeners
    App\EventListener\WanderUploadListener:
        tags:
            - { name: 'doctrine.orm.entity_listener' }

    App\EventListener\WanderDeleteListener:
        tags:
            - { name: 'doctrine.orm.entity_listener', entity: 'App\Entity\Wander', lazy: true }

    App\EventListener\ImageCalculatedFieldSetterListener:
        tags:
            - { name: 'doctrine.orm.entity_listener' }

    App\EventListener\ImageGeneralPostPersistListener:
        tags:
            -
                name: 'doctrine.orm.entity_listener'
                event: 'postPersist'
                entity: 'App\Entity\Image'
                lazy: true # We'll be uploading a new image very rarely, comparatively speaking

    # Update related wander search index entry when image is updated
    App\EventListener\SearchIndexer:
        tags:
            - { name: 'doctrine.orm.entity_listener' }

    # Listens for events that might affect our stats cache on multiple
    # entity types
    App\EventListener\StatsCacheClearer:
        tags:
            -
                name: 'doctrine.event_subscriber'

    # Store session in database https://symfony.com/doc/current/session/database.html
    Symfony\Component\HttpFoundation\Session\Storage\Handler\PdoSessionHandler:
            arguments:
                - '%env(DATABASE_URL)%'


    # https://github.com/symfony/symfony/issues/40477#issuecomment-825457203
    # Custom cache with custom namespace for messenger restart worker signal cache, so
    # it stays consistent across deployments, allowing them to be terminated correctly
    # even after our Deployer deployment clears the cache.
    restart_workers_signal.cache:
        parent: 'cache.app'
        tags:
            - { name: 'cache.pool', namespace: 'messenger-worker-namespace' }

    cache.messenger.restart_workers_signal: '@restart_workers_signal.cache'

    Doctrine\Migrations\Version\DbalMigrationFactory: ~
    App\Migrations\Factory\MigrationFactoryDecorator:
        decorates: Doctrine\Migrations\Version\DbalMigrationFactory
        arguments: ['@App\Migrations\Factory\MigrationFactoryDecorator.inner', '@service_container']
